rules:
  CWE-1004:
    categories:
      - ALL
      - cwe-1004
    description: The software uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.
    group: top10-security-misconfiguration
    name: CWE-1004
    pretty_name: CWE-1004 - Sensitive Cookie Without 'HttpOnly' Flag
    ref: https://cwe.mitre.org/data/definitions/1004.html
  CWE-1022:
    categories:
      - ALL
      - cwe-1022
    description: The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.
    group: top10-security-misconfiguration
    name: CWE-1022
    pretty_name: CWE-1022 - Missing Reverse-Tabnabbing Protection
    ref: https://cwe.mitre.org/data/definitions/1022.html
  CWE-1104:
    categories:
      - ALL
      - cwe-1104
      - boost-baseline
      - boost-hardened
      - vulnerable-and-outdated-components
    description: The product relies on third-party components that are not actively supported or maintained by the original developer or a trusted proxy for the original developer.
    group: top10-vulnerable-components
    name: CWE-1104
    pretty_name: CWE-1104 - Use of Unmaintained Third Party Components
    ref: https://cwe.mitre.org/data/definitions/1104.html
  CWE-125:
    categories:
      - ALL
      - cwe-125
      - boost-baseline
      - boost-hardened
    description: The software reads data past the end, or before the beginning, of the intended buffer.
    group: top10-insecure-design
    name: CWE-125
    pretty_name: CWE-125 - Out-of-bounds Read
    ref: https://cwe.mitre.org/data/definitions/125.html
  CWE-1254:
    categories:
      - ALL
      - cwe-1254
    description: The comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure, the operation may be vulnerable to a timing attack that can result in the interception of the process.
    group: top10-insecure-design
    name: CWE-1254
    pretty_name: CWE-1254 - Incorrect Comparison Logic Granularity
    ref: https://cwe.mitre.org/data/definitions/1254.html
  CWE-1336:
    categories:
      - ALL
      - cwe-1336
      - boost-baseline
      - boost-hardened
    description: The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed.
    group: top10-injection
    name: CWE-1336
    pretty_name: CWE-1336 - Improper Neutralization of Special Elements Used in a Template Engine
    ref: https://cwe.mitre.org/data/definitions/1336.html
  CWE-185:
    categories:
      - ALL
      - cwe-185
    description: The software specifies a regular expression in a way that causes data to be improperly matched or compared.
    group: top10-insecure-design
    name: CWE-185
    pretty_name: CWE-185 - Incorrect Regular Expression
    ref: https://cwe.mitre.org/data/definitions/185.html
  CWE-20:
    categories:
      - ALL
      - cwe-20
      - boost-hardened
    description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.
    group: top10-injection
    name: CWE-20
    pretty_name: CWE-20 - Improper Input Validation
    ref: https://cwe.mitre.org/data/definitions/20.html
  CWE-200:
    categories:
      - ALL
      - cwe-200
      - boost-hardened
    description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.
    group: top10-broken-access-control
    name: CWE-200
    pretty_name: CWE-200 - Exposure of Sensitive Information
    ref: https://cwe.mitre.org/data/definitions/200.html
  CWE-22:
    categories:
      - ALL
      - cwe-22
      - boost-baseline
      - boost-hardened
    description: The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname.
    group: top10-broken-access-control
    name: CWE-22
    pretty_name: CWE-22 - Path Traversal
    ref: https://cwe.mitre.org/data/definitions/22.html
  CWE-259:
    categories:
      - ALL
      - cwe-259
      - boost-baseline
      - boost-hardened
    description: The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.
    group: top10-id-authn-failures
    name: CWE-259
    pretty_name: CWE-259 - Use of Hard-coded Password
    ref: https://cwe.mitre.org/data/definitions/259.html
  CWE-284:
    categories:
      - ALL
      - cwe-284
      - boost-hardened
    description: The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.
    group: top10-broken-access-control
    name: CWE-284
    pretty_name: CWE-284 - Improper Access Control
    ref: https://cwe.mitre.org/data/definitions/284.html
  CWE-285:
    categories:
      - ALL
      - cwe-285
      - boost-hardened
    description: The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.
    group: top10-broken-access-control
    name: CWE-285
    pretty_name: CWE-285 - Improper Authorization
    ref: https://cwe.mitre.org/data/definitions/285.html
  CWE-287:
    categories:
      - ALL
      - cwe-287
    description: When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.
    group: top10-id-authn-failures
    name: CWE-287
    pretty_name: CWE-287 - Improper Authentication on Critical Resource
    ref: https://cwe.mitre.org/data/definitions/287.html
  CWE-311:
    categories:
      - ALL
      - cwe-311
      - boost-baseline
      - boost-hardened
    description: The software does not encrypt sensitive or critical information before storage or transmission.
    group: top10-insecure-design
    name: CWE-311
    pretty_name: CWE-311 - Missing Encryption of Sensitive Data
    ref: https://cwe.mitre.org/data/definitions/311.html
  CWE-328:
    categories:
      - ALL
      - cwe-328
      - boost-hardened
    description: The product uses an algorithm that produces a digest that does not meet security expectations for a hash function that allows a preimage attack, find another input that can produce the same hash (2nd preimage attack), or birthday attack.
    group: top10-crypto-failures
    name: CWE-328
    pretty_name: CWE-328 - Use of Weak Hash
    ref: https://cwe.mitre.org/data/definitions/328.html
  CWE-352:
    categories:
      - ALL
      - cwe-352
      - boost-baseline
      - boost-hardened
    description: The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.
    group: top10-crypto-failures
    name: CWE-352
    pretty_name: CWE-352 - Cross-Site Request Forgery (CSRF)
    ref: https://cwe.mitre.org/data/definitions/352.html
  CWE-369:
    categories:
      - ALL
      - cwe-369
    description: The product divides a value by zero.
    group: top10-insecure-design
    name: CWE-369
    pretty_name: CWE-369 - Divide By Zero
    ref: https://cwe.mitre.org/data/definitions/369.html
  CWE-399:
    categories:
      - ALL
      - cwe-399
    description: Weaknesses in this category are related to improper management of system resources.
    group: top10-insecure-design
    name: CWE-399
    pretty_name: CWE-399 - Resource Management Errors
    ref: https://cwe.mitre.org/data/definitions/399.html
  CWE-470:
    categories:
      - ALL
      - cwe-470
      - boost-hardened
    description: The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.
    group: top10-injection
    name: CWE-470
    pretty_name: CWE-470 - Use of Externally-Controlled Input to Select Classes or Code
    ref: https://cwe.mitre.org/data/definitions/470.html
  CWE-502:
    categories:
      - ALL
      - cwe-502
      - boost-baseline
      - boost-hardened
    description: The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.
    group: top10-software-data-integrity-failures
    name: CWE-502
    pretty_name: CWE-502 - Deserialization of Untrusted Data
    ref: https://cwe.mitre.org/data/definitions/502.html
  CWE-565:
    categories:
      - ALL
      - cwe-565
      - boost-baseline
      - boost-hardened
    description: The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.
    group: top10-software-data-integrity-failures
    name: CWE-565
    pretty_name: CWE-565 - Reliance on Cookies without Validation and Integrity Checking
    ref: https://cwe.mitre.org/data/definitions/565.html
  CWE-601:
    categories:
      - ALL
      - cwe-601
    description: A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.
    group: top10-broken-access-control
    name: CWE-601
    pretty_name: CWE-601 - URL Redirection to Untrusted Site ('Open Redirect')
    ref: https://cwe.mitre.org/data/definitions/601.html
  CWE-614:
    categories:
      - ALL
      - cwe-614
    description: The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.
    group: top10-security-misconfiguration
    name: CWE-614
    pretty_name: CWE-614 - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute
    ref: https://cwe.mitre.org/data/definitions/614.html
  CWE-74:
    categories:
      - ALL
      - cwe-74
      - boost-baseline
      - boost-hardened
    description: The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.
    group: top10-injection
    name: CWE-74
    pretty_name: CWE-74 - Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')
    ref: https://cwe.mitre.org/data/definitions/74.html
  CWE-77:
    categories:
      - ALL
      - cwe-77
      - boost-baseline
      - boost-hardened
    description: The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.
    group: top10-injection
    name: CWE-77
    pretty_name: CWE-77 - Command Injection
    ref: https://cwe.mitre.org/data/definitions/77.html
  CWE-777:
    categories:
      - ALL
      - cwe-777
      - boost-hardened
    description: The software uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.
    group: top10-insecure-design
    name: CWE-777
    pretty_name: CWE-777 - Regular Expression without Anchors
    ref: https://cwe.mitre.org/data/definitions/777.html
  CWE-79:
    categories:
      - ALL
      - cwe-79
      - boost-baseline
      - boost-hardened
    description: The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.
    group: top10-injection
    name: CWE-79
    pretty_name: CWE-79 - Cross-site Scripting (XSS)
    ref: https://cwe.mitre.org/data/definitions/79.html
  CWE-798:
    categories:
      - ALL
      - cwe-798
      - boost-baseline
      - boost-hardened
    description: The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.
    group: top10-id-authn-failures
    name: CWE-798
    pretty_name: CWE-798 - Use of Hard-coded Credentials
    ref: https://cwe.mitre.org/data/definitions/798.html
  CWE-89:
    categories:
      - ALL
      - cwe-89
      - boost-baseline
      - boost-hardened
    description: The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.
    group: top10-injection
    name: CWE-89
    pretty_name: CWE-89 - SQL Injection
    ref: https://cwe.mitre.org/data/definitions/89.html
  CWE-913:
    categories:
      - ALL
      - cwe-913
      - boost-baseline # Only occurence is eval(userInput) - https://github.com/presidentbeef/brakeman/blob/9b44232e8fa374483a9964e2cf988818c68103ea/lib/brakeman/checks/check_evaluation.rb#L32
      - boost-hardened
    description: The software does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.
    group: top10-broken-access-control
    name: CWE-913
    pretty_name: CWE-913 - Improper Control of Dynamically-Managed Code Resources
    ref: https://cwe.mitre.org/data/definitions/913.html
  CWE-915:
    categories:
      - ALL
      - cwe-915
      - boost-hardened
    description: The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.
    group: top10-software-data-integrity-failures
    name: CWE-915
    pretty_name: CWE-915 - Use of Incorrectly-Resolved Name or Reference
    ref: https://cwe.mitre.org/data/definitions/915.html
  CWE-94:
    categories:
      - ALL
      - cwe-94
      - boost-baseline
      - boost-hardened
    description: The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.
    group: top10-injection
    name: CWE-94
    pretty_name: CWE-94 - Improper Control of Generation of Code ('Code Injection')
    ref: https://cwe.mitre.org/data/definitions/94.html
  CWE-95:
    categories:
      - ALL
      - cwe-95
      - boost-baseline
      - boost-hardened
    description: The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval").
    group: top10-injection
    name: CWE-95
    pretty_name: CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')
    ref: https://cwe.mitre.org/data/definitions/95.html
  CWE-295:
    categories:
    - ALL
    - cwe-top-25
    - cwe-295
    - boost-baseline
    - boost-hardened
    group: top10-id-authn-failures
    name: CWE-295
    pretty_name: CWE-295 - Improper Certificate Validation
    description: The code does not validate, or incorrectly validates, a certificate.
    ref: https://cwe.mitre.org/data/definitions/295.html

